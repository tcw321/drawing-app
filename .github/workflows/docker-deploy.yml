name: Docker Build and Deploy

on:
  push:
    branches:
      - main  # or master, depending on your default branch name

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/drawing-app
  HOST_IP: ${{ secrets.HOST_IP }}
  HOST_USER: ${{ secrets.HOST_USER }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadless

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
        cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST_IP }}
        username: ${{ secrets.HOST_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /path/to/app
          docker-compose pull
          docker-compose up -d
          # Ensure SSL certificates are valid
          if [ ! -d "./certbot/conf/live/${{ secrets.DOMAIN_NAME }}" ]; then
            chmod +x init-letsencrypt.sh
            ./init-letsencrypt.sh
          fi