name: Docker Build and Deploy

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/drawing-app
  HOST_IP: ${{ secrets.HOST_IP }}
  HOST_USER: ${{ secrets.HOST_USER }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadless

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
        cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

    - name: Copy config files and deploy
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST_IP }}
        username: ${{ secrets.HOST_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "docker-compose.yml,nginx/ssl.conf,init-letsencrypt.sh,nginx/temp.conf"
        target: "~/drawing-app"
        strip_components: 0

    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST_IP }}
        username: ${{ secrets.HOST_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ~/drawing-app
          
          # Login to Docker Hub without storing credentials
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin --config /dev/null
          
          # Create .env file for docker-compose
          echo "DOCKER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/drawing-app" > .env
          
          # Create required directories
          mkdir -p certbot/conf certbot/www
          
          # Stop all containers
          docker-compose down --remove-orphans
          sleep 5
          
          # Get SSL certificate if it doesn't exist
          if [ ! -d "./certbot/conf/live/tcw321.net" ]; then
            echo "Obtaining SSL certificate..."
            docker-compose run --rm --entrypoint "\
              certbot certonly --standalone \
                --email tim08162016@gmail.com \
                -d tcw321.net \
                --rsa-key-size 4096 \
                --agree-tos \
                --force-renewal \
                --non-interactive" certbot
          fi
          
          # Pull and start containers
          docker-compose pull
          docker-compose up -d
          
          # Remove old images
          docker image prune -f
          
          # Cleanup Docker login
          docker logout
          
          # Show final status
          echo "Final container status:"
          docker-compose ps
          
          # Check certificate status
          docker-compose run --rm --entrypoint "\
            certbot certificates" certbot